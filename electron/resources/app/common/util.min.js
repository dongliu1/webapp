var sku;
(function(n) {
	(function(n) {
		(function(t) {
			(function(i) {
				"use strict";

				function log(n) {
					console.log("SpreadDesigner: ", n)
				}
				function warn(n) {
					console.warn("SpreadDesigner: ", n)
				}
				function error(n) {
					console.error("SpreadDesigner: ", n)
				}
				function assert(n, t) {
					if (!n) throw "SpreadDeisgner Assertion: " + t;
				}
				function format(n) {
					for (var i = [], r, t = 0; t < arguments.length - 1; t++) i[t] = arguments[t + 1];
					return i.length === 1 && typeof i[0] == "object" ? (r = /{([^{}]+)}/gm, n.replace(r, function(n, t) {
						return i[0][t]
					})) : (r = /{(\d+)}/gm, n.replace(r, function(n, t) {
						return i[~~t]
					}))
				}
				function loadHtml(n, t, i) {
					var r = $.Deferred();
					return $.get(n).done(function(n) {
						i.empty(), i.append($("<div></div>").append($.parseHTML(n)).find(t)), r.resolve(i)
					}).fail(function(n, t) {
						i.empty(), i.append($("<div></div>").addClass("error").text("Loading failed with error: " + t)), r.reject([n, t])
					}), r
				}
				function loadScript(n) {
					function u() {
						i.resolve()
					}
					function f() {
						i.reject()
					}
					var i = $.Deferred(),
						t, r;
					if ($('script[src="' + n + '"]').length !== 0) {
						i.resolve();
						return
					}
					return t = document.createElement("script"), t.type = "text/javascript", t.charset = "utf-8", t.async = !0, !t.attachEvent || t.attachEvent.toString && t.attachEvent.toString().indexOf("[native code") < 0 || typeof opera != "undefined" && opera.toString() === "[object Opera]" ? (t.addEventListener("load", u, !1), t.addEventListener("error", f, !1)) : t.attachEvent("onreadystatechange", u), t.src = n, r = document.getElementsByTagName("head")[0], r.appendChild(t), i
				}
				function loadCss(n) {
					var i = $.Deferred(),
						t;
					return $('link[href="' + n + '"]').length === 0 && (t = $("<link>"), t.attr("href", n), t.attr("type", "text/css"), t.attr("rel", "stylesheet"), $("head").append(t)), i.resolve(), i
				}
				function parseFont(n) {
					var f = null,
						t = null,
						c = "normal",
						e = "normal",
						h = "normal",
						r = "normal",
						o = n.split(/\s+/),
						i, u;
					while (i = o.shift()) switch (i) {
					case "normal":
						break;
					case "italic":
					case "oblique":
						c = i;
						break;
					case "small-caps":
						h = i;
						break;
					case "bold":
					case "bolder":
					case "lighter":
					case "100":
					case "200":
					case "300":
					case "400":
					case "500":
					case "600":
					case "700":
					case "800":
					case "900":
						e = i;
						break;
					default:
						if (!t) {
							u = i.split("/"), t = u[0], t.indexOf("px") !== -1 && (t = px2pt(parseFloat(t)) + "pt"), u.length > 1 && (r = u[1], r.indexOf("px") !== -1 && (r = px2pt(parseFloat(r)) + "pt"));
							break
						}
						return f = i, o.length && (f += " " + o.join(" ")), {
							fontStyle: c,
							fontVariant: h,
							fontWeight: e,
							fontSize: t,
							lineHeight: r,
							fontFamily: f
						}
					}
					return {
						fontStyle: c,
						fontVariant: h,
						fontWeight: e,
						fontSize: t,
						lineHeight: r,
						fontFamily: f
					}
				}
				function px2pt(n) {
					var t, i;
					return f.css({
						"font-size": "96pt",
						display: "none"
					}), f.appendTo($(document.body)), t = f.css("font-size"), t.indexOf("px") !== -1 ? (i = parseFloat(t), Math.round(n * 96 / i)) : Math.round(n * 72 / 96)
				}
				function getThemeFont(n) {
					var i = t.wrapper.spread.getActiveSheet().currentTheme();
					if (i && n) if (n === "Body") return i.bodyFont();
					else if (n === "Headings") return i.headerFont();
					return null
				}
				function toCSSTextDecoration(n) {
					var t = "";
					if (n !== 0) return n & 1 && (t += "underline "), n & 2 && (t += "line-through "), n & 4 && (t += "overline "), t
				}
				function parseFormulaSparkline(i, r) {
					var e = t.wrapper.spread.getActiveSheet(),
						f, calcService, u;
					if (!e) return null;
					f = e.getFormula(i, r);
					if (!f) return null;
					calcService = e.getCalcService();
					try {
						u = calcService.parse(null, f, i, r);
						if (u instanceof n.Calc.Expressions.FunctionExpression){
							if (u.fn.name && t.wrapper.spread.getSparklineEx(u.fn.name)) {
								return u
							}
						}
					} catch (s) {}
					return null
				}
				function unParseFormula(n, i, r) {
					var f = t.wrapper.spread.getActiveSheet(),
						u;
					return f ? (u = f.getCalcService(), u.unparse(null, n, i, r)) : null
				}
				function parseJsonSchema(n) {
					if (!n.$schema) return null;
					var i = [],
						t = $.extend({}, n),
						r = t.definitions;
					return u(r, n, !0), u(t, n, !1), h(t, i, !0), i
				}
				function u(n, t, i) {
					var o, h, c, a, e, s, f, l;
					if (!n) return;
					o = n.$ref;
					if (o && typeof o == "string") {
						if (o.indexOf("#") === 0) {
							for (c = o.split("/"), a = c.length, e = $.extend({}, t), s = 1; s < a; s++) {
								if (!e) break;
								e = e[c[s]]
							}
							e && (h = e)
						}
						if (h) {
							if (r.join("/").indexOf(o) !== -1) return;
							delete n.$ref, $.extend(n, h)
						}
					}
					if (n.properties) r.push("properties"), u(n.properties, t);
					else for (f in n) {
						if (f === "patternProperties" || f === "allOf" || f === "anyOf" || f === "oneOf" || f === "not") continue;
						if (n.hasOwnProperty(f) && typeof n[f] == "object") {
							i && (r = ["#", "definitions"]);
							if (r.indexOf(f) !== -1) {
								l = "#/definitions/" + f;
								if (r.join("/").indexOf(l) !== -1) return
							}
							r.push(f), u(n[f], t)
						}
					}
				}
				function h(n, t, i) {
					var o, l, u, r, f, s, a, c;
					if (!n) return;
					if (!n.properties && !n.items && !n.definitions) return;
					o = {}, n.items && (o.items = n.items), n.properties && (o.properties = n.properties), n.definitions && (o.definitions = n.definitions);
					for (l in o) if (o.hasOwnProperty(l)) {
						u = o[l];
						for (r in u) {
							i && (e = []);
							if (u.hasOwnProperty(r)) {
								if (e.indexOf(r) !== -1) return;
								e.push(r), f = {}, f.name = r;
								if (typeof u[r] == "object") {
									u[r].type && (f.type = u[r].type), u[r].dataFieldType && (f.dataFieldType = u[r].dataFieldType);
									if (u[r]["enum"]) for (s = u[r]["enum"], f["enum"] = s, f.children = [], a = s.length, c = 0; c < a; c++) f.children.push({
										name: s[c]
									});
									u[r].properties && (f.children = [], h(u[r], f.children)), u[r].items && (f.children = [], h(u[r].items, f.children))
								}
								t.push(f)
							}
						}
					}
				}
				function saveJSONSchema(n) {
					if (n.constructor !== Array.prototype.constructor) return;
					var t = {};
					return t.$schema = "http://json-schema.org/draft-04/schema#", t.properties = {}, t.type = i.BasicDataType.Object, o(n, t.properties, i.BasicDataType.Object), t
				}
				function o(n, t, r) {
					var l = n.length,
						s;
					if (!l || l === 0) return;
					for (s = 0; s < l; s++) {
						var e = n[s],
							u = e.name,
							f = e.type,
							a = e.dataFieldType,
							h = e.children,
							c = e["enum"];
						if (!u) continue;
						t[u] || (t[u] = {}), a && (t[u].dataFieldType = a, f || (f = i.DefaultDataFieldTypeDic[a])), t[u].type = f ? f : i.BasicDataType.String, c && (t[u]["enum"] = c), h && !c && (f || (t[u].type = i.BasicDataType.Object), f === i.BasicDataType.Array ? (t[u].items || (t[u].items = {}), t[u].items.type = i.BasicDataType.Object, t[u].items.properties || (t[u].items.properties = {}), o(h, t[u].items.properties, f)) : (t[u].properties || (t[u].properties = {}), o(h, t[u].properties, f)))
					}
				}
				var f, r, e;
				i.log = log, 
				i.warn = warn, 
				i.error = error, 
				i.assert = assert,
				i.format = format, 
				i.loadHtml = loadHtml, 
				i.loadScript = loadScript, 
				i.loadCss = loadCss, 
				i.parseFont = parseFont, 
				f = $("<span></span>"), 
				i.px2pt = px2pt, 
				i.getThemeFont = getThemeFont, 
				i.toCSSTextDecoration = toCSSTextDecoration, 
				i.parseFormulaSparkline = parseFormulaSparkline, 
				i.unParseFormula = unParseFormula, 
				i.DataFieldType = {
					checkbox: "checkbox",
					hyperlink: "hyperlink",
					combox: "combox",
					button: "button",
					text: "text",
					table: "table"
				}, 
				i.BasicDataType = {
					Array: "array",
					Boolean: "boolean",
					Integer: "integer",
					Number: "number",
					Null: "null",
					Object: "object",
					String: "string"
				}, 
				i.DefaultTypeDic = {
					array: i.DataFieldType.table,
					boolean: i.DataFieldType.checkbox,
					integer: i.DataFieldType.text,
					number: i.DataFieldType.text,
					"null": i.DataFieldType.text,
					object: i.DataFieldType.text,
					string: i.DataFieldType.text
				}, 
				i.DefaultDataFieldTypeDic = {
					checkbox: i.BasicDataType.Boolean,
					hyperlink: i.BasicDataType.String,
					combox: i.BasicDataType.String,
					button: i.BasicDataType.String,
					text: i.BasicDataType.String,
					table: i.BasicDataType.Array
				}, 
				i.parseJsonSchema = parseJsonSchema, 
				r = [], 
				e = [], 
				i.saveJSONSchema = saveJSONSchema
			})(t.util || (t.util = {}));
			var i = t.util
		})(n.designer || (n.designer = {}));
		var t = n.designer
	})(n.spread || (n.spread = {}));
	var t = n.spread
})(sku || (sku = {}))