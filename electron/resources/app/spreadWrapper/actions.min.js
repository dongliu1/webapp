var sku;
(function(n) {
	(function(i) {
		(function(i) {
			(function(r) {
				"use strict";
				var OPENMODE={"ADD":1,"EDIT":2,"VIEW":3};
				var FAT="φάκελο文件列表files";
				var GetRequest=function() { 											//获取本页的url，并解析
					var url = location.search; //获取url中"?"符后的字串 
					var request = new Object(); 
					if (url.indexOf("?") != -1) { 
						var str = url.substr(1); 
						var strs = str.split("&"); 
						for(var i = 0; i < strs.length; i ++) { 
							request[strs[i].split("=")[0]]=decodeURIComponent(strs[i].split("=")[1]); 
						} 
					} 
					return request; 
				} 
				r.file=GetRequest();		
				function save(spread, s, args) {
					console.log(r);
					console.log("save-- 此处判断新建还是保存",spread.toJSON(),s,args);
					//r.currentFilePath ? saveFile(spread, r.currentFilePath, null, s, !1, args) : saveAs(spread, null, null, s)
					if(r.file.openmode==OPENMODE.ADD || r.file.fileid=="0"){ 
						skSaveAs(spread, s, args)
					}else{
						skSave(spread, s, args);
					}
				}
				
				function skSaveAs(spread, s, args){
				//dlgAdd:function(obj,e){
					var obj_button_save=this;
					var dlg=$('<div style="z-index:1000"><br>名称：<input name="filename" value="工作表"><br><br>类型：<select name="filetype"></select></div>').appendTo("body");
					
					
					var filetype={"1":"自定义","2":"日报","3":"月报","4":"年报","5":"周报","6":"季报"}
					$.each(filetype,function(i,ftype){
						var selected=(i=="3")?"selected":"";
						$("[name='filetype']",dlg).append("<option value='"+i+"' "+selected+">"+ftype+"</option>")
					});
					
					
					
					
					var dlg=($("#rox-openfile-container").length>0)?($("#rox-openfile-container")):$("<div id='rox-openfile-container' style='width:800px;positon:relative;overflow:hidden;padding-bottom:30px;'><iframe src='../db-report/report.html' style='width:100%;height:100%;border:0;'></iframe><div style='width:100%;height:28px;position:absolute;bottom:0;'>文件名：<div style='position:absolute;left:80px;right:200px;bottom:0;height:28px'><input type='text' name='filename' style='width:100%'></div><div style='float:right;margin-right:20px'>类型：<select name='filetype'></select><button class='btn-submit' style='margin-left:10px'>保存</button></div> </div></div>").appendTo("body");
	
					$(dlg).dialog({"title":"文件另存为","width":"800","height":"500",buttons:{} });
					
					var filetype={"1":"自定义","2":"日报","3":"月报","4":"年报","5":"周报","6":"季报"}
					$.each(filetype,function(i,ftype){
						var selected=(i=="3")?"selected":"";
						$("[name='filetype']",dlg).append("<option value='"+i+"' "+selected+">"+ftype+"</option>")
					});
					
					$(".btn-submit",dlg).off("click").on("click",function(){
						
						
						/*r.file.updatetime = (new Date()).valueOf();	//更新保存时间
								delete r.file.openmode;						//删除openmode
								delete r.file.content;						//删除文件内容
								
								console.log("report",r.file.filepath,FAT);
								var strFAT = commonCallbackObj.getFile("report",r.file.filepath,FAT);
								console.log(strFAT);
								var fat=$.parseJSON(strFAT);
								fileid=r.file.fileid+"";
								fat[fileid]=r.file;
								var result_savefat = commonCallbackObj.putFile("report",r.file.filepath,FAT,JSON.stringify(fat));
								if(result_savefat=="False"){
									i.MessageBox.show("保存FAT失败！");
									return;
								}
								
								r.file.content = JSON.stringify(spread.toJSON());			//获取当前文件内容
								var result_SaveContent = commonCallbackObj.postFile("report",r.file.filepath,fileid,JSON.stringify(r.file));
								
								if(result_SaveContent=="False"){
									i.MessageBox.show("保存文件失败！");
									r.file.openmode=OPENMODE.ADD;
									return;
								}
								r.file.openmode=OPENMODE.EDIT;
								i.MessageBox.show("保存文件成功！");*/
						
					})
					
					console.log("进入添加页面")
					return;
				}
				function skSave(spread, s, args){
					if(r.file.openmode==OPENMODE.ADD){				//进入添加文件部分
						console.log(r.file)
						if(r.file.fileid=="0"){								//fileid未赋值时，进入dialog
							//this.dlgAdd();
							console.log("进入添加页面")
							return;
						}
						
						r.file.updatetime = (new Date()).valueOf();	//更新保存时间
						delete r.file.openmode;						//删除openmode
						delete r.file.content;						//删除文件内容
						
						console.log("report",r.file.filepath,FAT);
						var strFAT = commonCallbackObj.getFile("report",r.file.filepath,FAT);
						console.log(strFAT);
						var fat=$.parseJSON(strFAT);
						fileid=r.file.fileid+"";
						fat[fileid]=r.file;
						//console.log(JSON.stringify(fat));
						var result_savefat = commonCallbackObj.putFile("report",r.file.filepath,FAT,JSON.stringify(fat));
						//console.log("result_savefat",result_savefat)
						//保存FAT
						
						if(result_savefat=="False"){
							i.MessageBox.show("保存FAT失败！");
							return;
						}
						
						r.file.content = JSON.stringify(spread.toJSON());			//获取当前文件内容
						var result_SaveContent = commonCallbackObj.postFile("report",r.file.filepath,fileid,JSON.stringify(r.file));
						
						if(result_SaveContent=="False"){
							i.MessageBox.show("保存文件失败！");
							r.file.openmode=OPENMODE.ADD;
							return;
						}
						r.file.openmode=OPENMODE.EDIT;
						i.MessageBox.show("保存文件成功！");
						
					}else if(r.file.openmode==OPENMODE.EDIT){		//进入保存文件内容
						r.file.updatetime = (new Date()).valueOf();	//更新保存时间
						delete r.file.openmode;	
						delete r.file.time1;
						delete r.file.time2;
						console.log(r);
						r.file.content = spread.toJSON();
						//console.log(JSON.stringify(r.file));
						var result_SaveContent = commonCallbackObj.putFile("report",r.file.filepath,(r.file.fileid+""),JSON.stringify(r.file));
						
						
						//console.log(JSON.stringify(r.file));
						if(result_SaveContent=="False"){
							i.MessageBox.show("保存文件失败！");
							return;
						}
						r.file.openmode=OPENMODE.EDIT;
						i.MessageBox.show("保存文件成功！");
					}
				}
				function open(spread, file) {
					
					console.log(r,spread,file);
					
					skOpen(spread,file);
					
					
					
					/*var	u;
					file || (file = {
						title: i.res.openFileDialogTitle,
						nameFilters: [i.res.allSpreadFileFilter, i.res.spreadFileFilter, i.res.excelFileFilter, i.res.excelFileFilter2, i.res.csvFileFilter, i.res.allFileFilter]
					}),
					u = function(file) {
						if (file.status === "cancelled") return;
						var i = file.fileName.substring(file.fileName.lastIndexOf(".") + 1);
						switch (i.toLowerCase()) {
						case "ssjson":
							openJson(spread, file.fileName);
							break;
						case "xls":
						case "xlsx":
						case "csv":
							c(spread, file.fileName);
							break
						}
					},
					app.showOpenDialog(file, u)*/
				}
				
				function skOpen(spread,file){
					var dlg=($("#rox-openfile-container").length>0)?($("#rox-openfile-container")):$("<div id='rox-openfile-container' style='width:800px;positon:relative;overflow:hidden'><iframe src='../db-report/report.html' style='width:100%;height:100%;border:0'></iframe></div>").appendTo("body");
			
					$(dlg).dialog({"title":"打开文件","width":"800","height":"500",
						buttons:{
							/*"打开":function(){
								
							}*/
						
						}
					})
				}
				
				function kt() {
					return app !== undefined && typeof app == "object"
				}
				function ht(n) {
					for (var i = n.split("-"), r, t = 1; t < i.length; t++) r = i[t], i[t] = r[0].toUpperCase() + r.slice(1);
					return i.join("")
				}
				function doAction(n, t, r) {
					var e = t.isPaintSuspended(),
						u, f;
					t.isPaintSuspended(!0);
					try {
						i.util.assert(typeof n == "string" && n !== "doAction", "actionName invalid"), n = ht(n), u = this[n], u === undefined && (u = i.spreadActions[n]), i.util.assert(u !== undefined, 'cannot found the action "' + n + '".'), typeof r == "array" ? (f = r.slice(0), f.unshift(t)) : f = [t, r], u.apply(null, f)
					} catch (o) {
						t.isPaintSuspended(e);
						throw o;
					}
					t.isPaintSuspended(e), t.getActiveSheet()._eventHandler.setFocus()
				}
				function getFiletype(filename) {
					return filename.substring(filename.lastIndexOf(".") + 1).toLowerCase()
				}
				
				function saveAs(spread, file, r, s) {
					var f = file,
						o, e;
					if(f){
						f = {
							title: i.res.openFileDialogTitle,
							nameFilters: [
								i.res.spreadFileFilter,
								i.res.ssJSONToJSFilter, 
								i.res.excelFileFilter, 
								i.res.excelFileFilter2, 
								i.res.csvFileFilter, 
								i.res.allFileFilter
							]
						}
					};

					o = r === null || r === undefined ? null : JSON.stringify(r),

					e = function(file) {
						if (file.status === "cancelled") return;
						saveFile(spread, file.fileName, o, s)
					}, 
					
					app.showSaveDialog(f, e)
				}
				function saveFile(spread, t, i, r, u, f) {
					var filetype = getFiletype(t);
					console.log(filetype);
					switch (filetype) {
					case "ssjson":
						saveTxt(spread, t, r, u, f, !1);
						break;
					case "js":
						saveTxt(spread, t, r, u, f, !0);
						break;
					case "csv":
					case "pdf":
						saveBinary(spread, t, i, r, u, f);
						break;
					case "xls":
					case "xlsx":
						i === null && (i = {
							saveFlags: 8
						}), 
						saveBinary(spread, t, i, r, u, f);
						break
					}
				}
				function saveTxt(spread, fullpath, f, e, o, s) {
					setBindingPathSchema(spread);
					var h = spread.toJSON();
					spread.designerBindingPathSchema && (h.designerBindingPathSchema = spread.designerBindingPathSchema),
					app.save(fullpath, JSON.stringify(h), function(spread) {
						if(spread.status === "failed"){
							i.MessageBox.show(spread.message, i.res.title, 3) 
						}else {
							e || (r.currentFilePath = t.replace(/\//g, "\\"),
							r.isFileModified = !1,
							updateWindowTitle(),
							i.fileMenu.updateRecentList(t)),
							i.fileMenu.closeFileScreen(),
							f && app.exit()
						}
						o && o.call(null)
					}, s)
				}
				function saveBinary(n, t, f, e, o, s) {		//需要后端支持
					$(".loading-placeholder").removeClass("hidden");
					var filetype = getFiletype(t),
						h;
					if (f){ 
						switch (filetype) {
						case "xls":
						case "xlsx":
							h = {
								spread: n.toJSON(),
								exportFileType: filetype,
								excel: f
							};
							break;
						case "csv":
							h = {
								spread: n.toJSON(),
								exportFileType: filetype,
								csv: f
							};
							break;
						case "pdf":
							h = {
								spread: n.toJSON(),
								exportFileType: filetype,
								pdf: f
							};
							break
						} 
					}else {
						h = {
							spread: n.toJSON(),
							exportFileType: filetype
						}
					};
					app.exportFile(getServiceUrl("xsapi/export"), t, JSON.stringify(h), function(n) {
						try {
							n.status !== "success" ? i.MessageBox.show(n.message + "\n" + i.res.excelServiceUrlWrong, i.res.title, 3) : (o || (r.currentFilePath = t.replace(/\//g, "\\"), r.isFileModified = !1, updateWindowTitle(), i.fileMenu.updateRecentList(t)), i.fileMenu.closeFileScreen(), e && app.exit()), s && s.call(null)
						} catch (f) {
							i.fileMenu.closeFileScreen(), $(".loading-placeholder").addClass("hidden")
						}
						$(".loading-placeholder").addClass("hidden")
					})
				}
				
				function setBindingPathSchema(spread) {
					var f = $.fn.zTree.getZTreeObj("ztree-container"),
						u = null,
						t, r;
					if(f) {
						t = [], 
						u = f.getNodes()[0], 
						i.ribbon.treeNodeToArray(u.children, t), 
						r = i.util.saveJSONSchema(t);
						if(!$.isEmptyObject(r)) spread.designerBindingPathSchema = r;
					}
				}
				function getServiceUrl(n) {
					var t = app.config("excelService.url") || "http://localhost/ExcelIO/";
					return t.trim(), t.substring(t.length - 1) !== "/" && (t += "/"), n && (t += n), t
				}
				function setServiceUrl(n) {
					app.config("excelService.url", n)
				}
				function f(n, t, r) {
					var u = t,
						f;
					if(!u) {
						u = {
							title: i.res.openFileDialogTitle,
							nameFilters: [i.res.spreadFileFilter, i.res.ssJSONToJSFilter, i.res.excelFileFilter, i.res.excelFileFilter2, i.res.csvFileFilter, i.res.allFileFilter]
						}
					};
					f = function(t) {
						if (t.status === "cancelled") return;
						saveFile(n, t.fileName, r, !1, !0)
					};
					app.showSaveDialog(u, f)
				}
				function exportJson(n, t) {
					var r = {
						title: i.res.exportFileDialogTitle,
						nameFilters: [i.res.spreadFileFilter]
					};
					f(n, r, t)
				}
				function exportJS(n, t) {
					var r = {
						title: i.res.exportFileDialogTitle,
						nameFilters: [i.res.ssJSONToJSFilter]
					};
					f(n, r, t)
				}
				function exportExcel(n, t) {
					var r = {
						title: i.res.exportFileDialogTitle,
						nameFilters: [i.res.excelFileFilter]
					};
					f(n, r, t)
				}
				function exportExcel97(n, t) {
					var r = {
						title: i.res.exportFileDialogTitle,
						nameFilters: [i.res.excelFileFilter2]
					};
					f(n, r, t)
				}
				function exportCsv(n, t) {
					var r = {
						title: i.res.exportFileDialogTitle,
						nameFilters: [i.res.csvFileFilter]
					};
					f(n, r, t)
				}
				function exportPdf(n, t) {
					var r = {
						title: i.res.exportFileDialogTitle,
						nameFilters: [i.res.pdfFileFilter]
					};
					f(n, r, t)
				}
				
				function _import(n, t, r) {
					var u = t,
						f;
					u || (u = {
						title: i.res.openFileDialogTitle,
						nameFilters: [i.res.spreadFileFilter, i.res.excelFileFilter, i.res.excelFileFilter2, i.res.csvFileFilter, i.res.allFileFilter]
					}), f = function(t) {
						if (t.status === "cancelled") return;
						var i = t.fileName.substring(t.fileName.lastIndexOf(".") + 1);
						switch (i.toLowerCase()) {
						case "ssjson":
							openJson(n, t.fileName, !0);
							break;
						case "xls":
						case "xlsx":
						case "csv":
							c(n, t.fileName, r, !0);
							break
						}
					}, app.showOpenDialog(u, f)
				}
				function s(n) {
					i.MessageBox.show(i.res.unsavedWarning, i.res.title, 2, 2, n)
				}
				function openTemplate(f, o) {
					if (o === "Blank") {
						if (app.getLicenseStatus() !== LicenseStatus.Valid && app.getLicenseStatus() !== LicenseStatus.Trial) return;
						r.reset(), n.spread.designer.fileMenu.closeFileScreen();
						return
					}
					var h = function(f, e) {
							$.ajax({
								url: "./resources/templates/" + e + ".ssjson",
								type: "GET",
								dataType: "json",
								success: function(t) {
									try {
										i.wrapper.reset(), i.wrapper.spread.fromJSON(t), r.currentFilePath = "", r.isFileModified = !1, updateWindowTitle(), i.ribbon.updateRibbonBarStyle(), i.wrapper.spreadElement.trigger("FileOpened"), n.spread.designer.fileMenu.closeFileScreen()
									} catch (f) {
										n.spread.designer.fileMenu.closeFileScreen()
									}
								},
								error: function() {
									return i.MessageBox.show(t.designer.res.requestTempalteFail, t.designer.res.title, 3)
								}
							})
						};
					r.isFileModified && (app.getLicenseStatus() === LicenseStatus.Valid || app.getLicenseStatus() === LicenseStatus.Trial) ? s(function(n, t) {
						switch (t) {
						case 2:
							//e(f), h(f, o);
							save(f), _import(f, o);
							break;
						case 3:
							_import(f, o);
							//h(f, o);
							break;
						case 4:
							return
						}
					}) : _import(f, o)
					// }) : h(f, o)
				}
				function o(n) {
					var t, r, i;
					if (!n.getActiveSheet()) if (n.getSheetCount() > 0) n.setActiveSheetIndex(0);
					else throw "no sheet";
					for (t = 0; t < n.getSheetCount(); t++) r = n.getSheet(t).getActiveColumnIndex(), i = n.getSheet(t).getActiveRowIndex(), r !== undefined && i !== undefined ? n.getSheet(t).setActiveCell(i, r) : n.getSheet(t).setActiveCell(0, 0)
				}
				function openJson(n, t, f) {
					var h = function(n, t) {
							app.open(t, function(e) {
								var s;
								if (e.status === "failed") i.MessageBox.show(e.message, i.res.title, 3);
								else try {
									f ? (s = JSON.parse(e.data), n.fromJSON(s), s.designerBindingPathSchema && (i.wrapper.spread.designerBindingPathSchema = s.designerBindingPathSchema), o(n), r.isFileModified = !0) : (i.wrapper.reset(), s = JSON.parse(e.data), i.wrapper.spread.fromJSON(s), s.designerBindingPathSchema && (i.wrapper.spread.designerBindingPathSchema = s.designerBindingPathSchema), o(i.wrapper.spread), r.currentFilePath = e.fileName.replace(/\//g, "\\"), r.isFileModified = !1, i.fileMenu.updateRecentList(t)), i.fileMenu.closeFileScreen(), updateWindowTitle(), i.ribbon.updateRibbonBarStyle(), i.wrapper.spreadElement.trigger("FileOpened")
								} catch (h) {
									h === "no sheet" && (i.wrapper.reset(), i.MessageBox.show(i.res.openFileFormatError, i.res.title, 3))
								}
							})
						};
					r.isFileModified ? s(function(i, r) {
						switch (r) {
						case 2:
							//e(n), h(n, t);
							save(n), _import(n, t);
							break;
						case 3:
							h(n, t);
							break;
						case 4:
							return
						}
					}) : _import(n, t)
					// }) : h(n, t)
				}
				function c(n, t, f, h) {
					var c = function(n, t) {
							$(".loading-placeholder").removeClass("hidden"), app.importFile(getServiceUrl("xsapi/import"), t, JSON.stringify(f), function(f) {
								if (f.status === "success") {
									var e;
									try {
										e = JSON.parse(f.data)
									} catch (c) {
										i.fileMenu.closeFileScreen(), i.MessageBox.show("Parse file data error.", i.res.title, 3), $(".loading-placeholder").addClass("hidden")
									}
									if (e.spread) try {
										h ? (n.fromJSON(e.spread), o(n), r.isFileModified = !0) : (i.wrapper.reset(), i.wrapper.spread.fromJSON(e.spread), o(i.wrapper.spread), r.currentFilePath = t.replace(/\//g, "\\"), r.isFileModified = !1, i.fileMenu.updateRecentList(t)), i.fileMenu.closeFileScreen(), updateWindowTitle(), i.ribbon.updateRibbonBarStyle(), i.wrapper.spreadElement.trigger("FileOpened")
									} catch (s) {
										s === "no sheet" && (i.wrapper.reset(), i.MessageBox.show(i.res.openFileFormatError, i.res.title, 3))
									} else i.MessageBox.show(e.error, i.res.title, 3)
								} else i.MessageBox.show(f.message + "\n" + i.res.excelServiceUrlWrong, i.res.title, 3);
								$(".loading-placeholder").addClass("hidden")
							})
						};
					r.isFileModified ? s(function(i, r) {
						switch (r) {
						case 2:
							//e(n), c(n, t);
							save(n), c(n, t);
							break;
						case 3:
							c(n, t);
							break;
						case 4:
							return
						}
					}) : c(n, t)
				}
				function importJson(n, t) {
					var r = {
						title: i.res.importFileDialogTitle,
						nameFilters: [i.res.spreadFileFilter]
					};
					_import(n, r, t)
				}
				function importExcel(n, t) {
					var r = {
						title: i.res.importFileDialogTitle,
						nameFilters: [i.res.allExcelFilter, i.res.excelFileFilter, i.res.excelFileFilter2]
					};
					_import(n, r, t)
				}
				function importCsv(n, t) {
					var r = {
						title: i.res.importFileDialogTitle,
						nameFilters: [i.res.csvFileFilter]
					};
					_import(n, r, t)
				}
				function reset() {
					var n = function() {
							i.wrapper.reset(), i.ribbon.updateRibbonBarStyle(), r.currentFilePath = "", r.isFileModified = !1,
							updateWindowTitle()
						};
					r.isFileModified ? s(function(t, r) {
						switch (r) {
						case 2:
							save(i.wrapper.spread, !1, n);
							break;
						case 3:
							n();
							break;
						case 4:
							return
						}
					}) : n()
				}
				function undo(n) {
					n.undoManager().undo()
				}
				function redo(n) {
					n.undoManager().redo()
				}
				function _getPreferredZoomInfo() {
					var r = i.wrapper.spread.getActiveSheet(),
						c = r._getSheetLayout().viewportWidth,
						h = r._getSheetLayout().viewportHeight,
						f = r.getSelections(),
						t = f[0],
						s = 0,
						o = 0,
						n, u, e;
					if (f.length > 1) for (n = 1; n < f.length; n++) t = t.union(f[n]);
					for (n = 0; n < t.rowCount; n++) o += r.getRowHeight(t.row + n);
					for (u = 0; u < t.colCount; u++) s += r.getColumnWidth(t.col + u);
					return e = Math.min(c / s, h / o), {
						zoom: e,
						topRow: t.row,
						leftCol: t.col
					}
				}
				function updateWindowTitle() {
				//function u() {
					var n;
					r.isFileModified === !0 ? r.currentFilePath !== "" && $("title").text() !== l && (n = r.currentFilePath.substring(r.currentFilePath.lastIndexOf("\\") + 1), l = "* " + n + " - " + i.res.title, $("title").text(l)) : r.currentFilePath !== "" ? (n = r.currentFilePath.substring(r.currentFilePath.lastIndexOf("\\") + 1), $("title").text(n + " - " + i.res.title), i.wrapper.shouldModifiedHandlerExecute = !0) : $("title").text(i.res.title)
				}
				function active() {
					app.active()
				}
				
				r.currentFilePath = "", 
				r.doAction = doAction, 
				r.save = save, 
				r.saveAs = saveAs, 
				r.getServiceUrl = getServiceUrl, 
				r.setServiceUrl = setServiceUrl, 
				r.exportJson = exportJson, 
				r.exportJS = exportJS, 
				r.exportExcel = exportExcel, 
				r.exportExcel97 = exportExcel97, 
				r.exportCsv = exportCsv, 
				r.exportPdf = exportPdf, 
				r.open = open, 
				r._import = _import, 
				r.openTemplate = openTemplate, 
				r.openJson = openJson, 
				r.openOtherFormat = c, 
				r.importJson = importJson, 
				r.importExcel = importExcel,
				r.importCsv = importCsv, 
				r.reset = reset, 
				r.undo = undo, 
				r.redo = redo, 
				r._getPreferredZoomInfo = _getPreferredZoomInfo,
				r.isFileModified = !1;
				var l;
				r.updateWindowTitle = updateWindowTitle, r.active = active
			})(i.actions || (i.actions = {}));
			var r = i.actions
		})(i.designer || (i.designer = {}));
		var r = i.designer
	})(n.spread || (n.spread = {}));
	var t = n.spread
})(sku || (sku = {}))